seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
dt = unique(round(diff(time), digits = 6))
n_years = round(max(time) - min(time))
dt
n_years
trend = smooth.spline(signal, df = 2*n_years-1)$y
detrended_signal = signal - trend
trend
plot(trend)
detrended_signal = signal - trend
has_weekly_pattern = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot, period = dt*7)
plot = TRUE
has_weekly_pattern = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot, period = dt*7)
has_weekly_pattern
df = data.frame(time = time, day_of_week = round((time/dt) %% 7), y = detrended_signal)
mod = mgcv::gamm(y ~ s(day_of_week, k = 7 ), data = df, method = "REML")
weekly_trend = mgcv::predict.gam(mod$gam)
plot(weekly_trend)
plot(weekly_trend, type = "l")
summary(mod)
mod$lme
weekly_trend = mgcv::predict.gam(mod$gam)
detrended_signal_no_weekly = detrended_signal - weekly_trend
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal_no_weekly, title = title, plot = plot, period = 1)
plot(detrended_signal_no_weekly)
plot(detrended_signal_no_weekly, type = "\l")
plot(detrended_signal_no_weekly, type = "l")
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal_no_weekly, title = title, plot = plot, period = 1)
is_seasonal
df = data.frame(time = time, day_of_year = time %%1, y = detrended_signal_no_weekly)
head(df)
plot(df$time, df$y)
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
df = data.frame(time = time, day_of_year = time %%1, y = as.vector(detrended_signal_no_weekly))
cat("here\n")
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
cat("here\n")
seasonal_trend = mgcv::predict.gam(mod$gam)
plot(seasonal_trend)
plot(seasonal_trend, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/50)) , data = df, method = "REML")
cat("here\n")
seasonal_trend = mgcv::predict.gam(mod$gam)
plot(seasonal_trend, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
remainder = signal - trend - weekly_trend - seasonal_trend
par(mfrow = c(3,1), mar = c(0.5,2,2,0.2))
plot(time, signal, type = "l" , main = "signal + trend")
points(time, trend, type = "l", col = "green3", lwd = 2)
plot(time, detrended_signal, type = "l" , main = "detrended signal + weekly trend")
points(time, weekly_trend, type = "l", col = "green3", lwd = 2)
plot(time, detrended_signal_no_weekly, type = "l", main = "detrended signal + seasonal")
points(time, seasonal_trend, type = "l", col = "green3", lwd = 2)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
head(seasonal_analysis)
head(seasonal_analysis$time_series)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
head(seasonal_analysis$time_series)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
j = which(seasonal_analysis$time_series$remainder >=0.02)
par$date_seq[j]
par$date_seq[j] - 365
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[(s$indicator == "unprot_sex")]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "unprot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "unprot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[s$indicator == "prot_sex"]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "prot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "prot_sex Kindara", remove_weekly_patterns = TRUE)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
source("Scripts/00_setup.R")
load(paste0(IO$tmp_kindara, "sk1.Rdata"), verbose = TRUE)
g = ggplot(sk1, aes(x = date, y = tot_sex)) + geom_line()
g
s = reshape(sk1, varying = list(4:ncol(sk1)), idvar = c("date","n_cycles","n_obs"), direction = "long")
s$time = colnames(sk1)[4:ncol(sk1)][s$time]
colnames(s) = c("date","n_cycles","n_obs","indicator","value")
g = ggplot(s[grep("sex",s$indicator),], aes(x = date, y = value/n_cycles, col = indicator))
g + geom_line() + ggtitle("Sexual frequency (#/number of cycles)")
g = ggplot(s[grep("sex",s$indicator),], aes(x = date, y = value/n_obs, col = indicator))
g + geom_line() + ggtitle("Sexual frequency (#/number of observations on that day)")
s$n_indicator  = s$value/s$n_obs
s$n_indicator  = s$value/s$n_cycles
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_libraries.R')
signal_ts = ts(signal, frequency =  length(signal)/3)
plot(signal_ts)
findfrequency(signal_ts)
?findfrequency
signal_ts = ts(signal, frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(signal, frequency =  length(signal)/3)
y = findfrequency(signal_ts)
y
signal_ts = ts(signal, frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(rnorm(length(signal)), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(rnorm(length(signal)), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(cos((1:length(signal))*2*pi), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(cos((1:length(signal))*2*pi/7), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(cos((1:length(signal))*2*pi/7), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(cos((1:length(signal))*2*pi/7), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(signal, frequency =  length(signal)/3)
y = findfrequency(signal_ts)
y
signal_ts = ts(signal, frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(rnorm(length(signal)), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(cos((1:length(signal))*2*pi/7), frequency =  7)
y = findfrequency(signal_ts)
y
signal_ts = ts(signal, frequency =  length(signal)/3)
plot(signal_ts)
y = findfrequency(signal_ts)
y
signal_ts = ts(signal, frequency =  7)
plot(signal_ts)
y = findfrequency(signal_ts)
y
signal_ts = ts(rnorm(length(signal)), frequency =  7)
plot(signal_ts)
y = findfrequency(signal_ts)
y
signal_ts = ts(cos((1:length(signal))*2*pi/7), frequency =  7)
plot(signal_ts)
y = findfrequency(signal_ts)
y
fft(signal)
fft_sex = fft(signal)
plot(abs(fft_sex))
plot(abs(fft_sex), type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
seasonal_analysis$time_series
detrended_signal = signal -  seasonal_analysis$time_series$trend
detrended_signal = signal -  seasonal_analysis$time_series$trend
detrended_signal_ts = ts(detrended_signal, frequency =  length(signal)/3)
plot(detrended_signal_ts)
y = findfrequency(detrended_signal_ts)
y
detrended_signal_ts = ts(detrended_signal, frequency =  7)
plot(detrended_signal_ts)
y = findfrequency(detrended_signal_ts)
y
fft_sex = fft(signal)
plot(abs(fft_sex), type = "l")
fft_sex = fft(detrended_signal)
plot(abs(fft_sex), type = "l")
?fft
length(signal)/(1:(length(signal)/2))
period_in_days = length(signal)/(1:(length(signal)/2))
plot(period_in_days,abs(fft_sex)[2:(length(signal)/2)], type = "l")
plot(period_in_days,abs(fft_sex)[2:(length(signal)/2+1)], type = "l")
plot(abs(fft_sex), type = "l")
plot(period_in_days,abs(fft_sex)[2:(length(signal)/2+1)], type = "l")
plot(period_in_days,abs(fft_sex)[2:(length(signal)/2+1)], type = "l", log = "x")
detrended_signal_ts = ts(detrended_signal, frequency =  7)
plot(detrended_signal_ts)
y = findfrequency(detrended_signal_ts)
y
signal_ts = ts(cos((1:length(signal))*2*pi/7), frequency =  7)
plot(signal_ts)
y = findfrequency(signal_ts)
y
# weekly
detrended_signal_ts = ts(detrended_signal, frequency =  7)
plot(detrended_signal_ts)
y = findfrequency(detrended_signal_ts)
y
# yearly
detrended_signal_ts = ts(detrended_signal, frequency =  length(signal)/3)
plot(detrended_signal_ts)
y = findfrequency(detrended_signal_ts)
y
# weekly
detrended_signal_ts = ts(detrended_signal, frequency =  3.5)
plot(detrended_signal_ts)
y = findfrequency(detrended_signal_ts)
y
# cosine of period 7 (positive example check)
signal_ts = ts(cos((1:length(signal))*2*pi/7)+rnorm(length(signal))/10, frequency =  7)
plot(signal_ts)
y = findfrequency(signal_ts)
y
# cosine of period 7 (positive example check)
signal_ts = ts(cos((1:length(signal))*2*pi/7)+rnorm(length(signal))/2, frequency =  7)
plot(signal_ts)
y = findfrequency(signal_ts)
y
fft_sex = fft(signal)
plot(abs(fft_sex), type = "l")
fft_sex = fft(detrended_signal)
plot(abs(fft_sex), type = "l")
period_in_days = length(signal)/(1:(length(signal)/2))
plot(period_in_days,abs(fft_sex)[2:(length(signal)/2+1)], type = "l", log = "x")
source("Scripts/00_setup.R")
setwd("~/Google Drive/Ladies & Gentlemen/Papers/Tender_Breasts/TB-Public-Repo/Code")
source("Scripts/00_setup.R")
load(paste0(IO$tmp_data,"d_wide_imputed.Rdata"), verbose = TRUE)
colnames(d_wide)
dim(d_wide)
load(paste0(IO$output_data,"cycles_m.Rdata"), verbose = TRUE)
colnames(cycles_m)
dim(cycles_m)
load(paste0(IO$output_data,"cycles.Rdata"), verbose = TRUE)
colnames(cycles)
d_wide[d_wide == -1] = 0
j = which(!(cycles_m$cycle_id_m %in% d_wide$cycle_id_m))
d_wide_empty = data.frame(cycle_id_m = cycles_m$cycle_id_m[j])
for(column in colnames(d_wide[,-1])){
eval(parse(text = paste0("d_wide_empty$",column," = 0")))
}
d_wide_full = rbind(d_wide, d_wide_empty)
cycles_m$cycle_id_m_prev = paste0(cycles_m$user_id,"_" ,cycles_m$cycle_nb_m - 1)
m = match(cycles_m$cycle_id_m_prev, cycles$cycle_id)
cycles_m$bmi = cycles$bmi[m]
cycles_m$cycle_length = cycles$cycle_length[m]
cycles_m$period_length = cycles$period_length[m]
cycles_m$diff_cl_median_3c = cycles$diff_cl_median_3c[m]
inputs = c("cycle_length","period_length","diff_cl_median_3c","BC","age","bmi", "country") #"height","weight",
m = match(d_wide$cycle_id_m, cycles_m$cycle_id_m)
for(input in inputs){
eval(parse(text = paste0("d_wide$",input," = cycles_m$",input,"[m]")))
}
pred = data.frame()
for(d in (-par$D):(par$Df) ){
cat(d,"\n")
eval(parse(text = paste0("d_wide$y = d_wide$day_",ifelse(d<0,"m",""),abs(d))))
eval(parse(text = paste0("mod_d = glm( round(y) ~ ",paste(inputs, collapse = " + ")," ,
data = d_wide,
family = 'binomial')")))
this_day_pred = data.frame(cycleday_m_D = d,
input = names(coef(summary(mod_d))[,1]),
est = coef(summary(mod_d))[,1],
z_value = coef(summary(mod_d))[,3],
p_value = coef(summary(mod_d))[,4]
)
pred = rbind(pred, this_day_pred)
if(d == 0){
mod_d_0 = mod_d
print(summary(mod_d))
}
}
rownames(pred) = 1:nrow(pred)
pred$q_value = p.adjust(pred$p_value, method = "BH")
g = ggplot(pred[!grepl("country",pred$input),], aes(x = cycleday_m_D, y = z_value, col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line() +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
g = ggplot(pred[grepl("country",pred$input),], aes(x = cycleday_m_D, y = z_value, col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line() +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
g = ggplot(pred[!grepl("country",pred$input),], aes(x = cycleday_m_D,col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line(aes(y = -log(q_value))) +
geom_line(aes(y = -log(p_value)), linetype = 2) +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
unique(d_wide$BC)
par$BC_dict$name
pred = data.frame()
for(d in (-par$D):(par$Df) ){
cat(d,"\n")
eval(parse(text = paste0("d_wide$y = d_wide$day_",ifelse(d<0,"m",""),abs(d))))
eval(parse(text = paste0("mod_d = glm( round(y) ~ ",paste(inputs, collapse = " + ")," ,
data = d_wide[d_wide$BC %in% par$BC_dict$name,],
family = 'binomial')")))
this_day_pred = data.frame(cycleday_m_D = d,
input = names(coef(summary(mod_d))[,1]),
est = coef(summary(mod_d))[,1],
z_value = coef(summary(mod_d))[,3],
p_value = coef(summary(mod_d))[,4]
)
pred = rbind(pred, this_day_pred)
if(d == 0){
mod_d_0 = mod_d
print(summary(mod_d))
}
}
rownames(pred) = 1:nrow(pred)
pred$q_value = p.adjust(pred$p_value, method = "BH")
g = ggplot(pred[!grepl("country",pred$input),], aes(x = cycleday_m_D, y = z_value, col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line() +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
cycles_m$bmi_cat = cut(cycles_m$bmi, breaks = c(-Inf, 18.5, 25, 30, Inf), labels = c("underweight","normal","overweight","obese"))
inputs = c("cycle_length","period_length","diff_cl_median_3c","BC","age","bmi_cat", "country") #"height","weight",
m = match(d_wide$cycle_id_m, cycles_m$cycle_id_m)
for(input in inputs){
eval(parse(text = paste0("d_wide$",input," = cycles_m$",input,"[m]")))
}
pred = data.frame()
for(d in (-par$D):(par$Df) ){
cat(d,"\n")
eval(parse(text = paste0("d_wide$y = d_wide$day_",ifelse(d<0,"m",""),abs(d))))
eval(parse(text = paste0("mod_d = glm( round(y) ~ ",paste(inputs, collapse = " + ")," ,
data = d_wide[d_wide$BC %in% par$BC_dict$name,],
family = 'binomial')")))
this_day_pred = data.frame(cycleday_m_D = d,
input = names(coef(summary(mod_d))[,1]),
est = coef(summary(mod_d))[,1],
z_value = coef(summary(mod_d))[,3],
p_value = coef(summary(mod_d))[,4]
)
pred = rbind(pred, this_day_pred)
if(d == 0){
mod_d_0 = mod_d
print(summary(mod_d))
}
}
rownames(pred) = 1:nrow(pred)
pred$q_value = p.adjust(pred$p_value, method = "BH")
g = ggplot(pred[!grepl("country",pred$input),], aes(x = cycleday_m_D, y = z_value, col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line() +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
?cut
head(cycles_m$bmi_cat)
cycles_m$bmi_cat = factor(cycles_m$bmi_cat, levels =  c("normal","underweight","overweight","obese"))
head(cycles_m$bmi_cat)
inputs = c("cycle_length","period_length","diff_cl_median_3c","BC","age","bmi_cat", "country") #"height","weight",
m = match(d_wide$cycle_id_m, cycles_m$cycle_id_m)
for(input in inputs){
eval(parse(text = paste0("d_wide$",input," = cycles_m$",input,"[m]")))
}
pred = data.frame()
for(d in (-par$D):(par$Df) ){
cat(d,"\n")
eval(parse(text = paste0("d_wide$y = d_wide$day_",ifelse(d<0,"m",""),abs(d))))
eval(parse(text = paste0("mod_d = glm( round(y) ~ ",paste(inputs, collapse = " + ")," ,
data = d_wide[d_wide$BC %in% par$BC_dict$name,],
family = 'binomial')")))
this_day_pred = data.frame(cycleday_m_D = d,
input = names(coef(summary(mod_d))[,1]),
est = coef(summary(mod_d))[,1],
z_value = coef(summary(mod_d))[,3],
p_value = coef(summary(mod_d))[,4]
)
pred = rbind(pred, this_day_pred)
if(d == 0){
mod_d_0 = mod_d
print(summary(mod_d))
}
}
rownames(pred) = 1:nrow(pred)
pred$q_value = p.adjust(pred$p_value, method = "BH")
g = ggplot(pred[!grepl("country",pred$input),], aes(x = cycleday_m_D, y = z_value, col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line() +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
g = ggplot(pred[!grepl("country",pred$input),], aes(x = cycleday_m_D, y = z_value, col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line() +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
g = ggplot(pred[grepl("country",pred$input),], aes(x = cycleday_m_D, y = z_value, col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line() +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
g = ggplot(pred[!grepl("country",pred$input),], aes(x = cycleday_m_D,col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line(aes(y = -log(q_value))) +
geom_line(aes(y = -log(p_value)), linetype = 2) +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
g = ggplot(pred[grepl("country",pred$input),], aes(x = cycleday_m_D,col = input)) +
geom_vline(xintercept = 0, size = 2, col = "gray90")+
geom_vline(xintercept = -14, size = 4, col = "gray90", alpha = 0.5)+
geom_hline(yintercept = 0, size = 0.1)+
geom_line(aes(y = -log(q_value))) +
geom_line(aes(y = -log(p_value)), linetype = 2) +
scale_x_continuous(breaks = par$x.axis)+
facet_wrap(input ~ .)+
guides(col = FALSE)
g
IO$out_Rdata
save(pred, file = paste0(IO$out_Rdata,"symptoms_predictors.Rdata"))
Sys.info()
local_user = Sys.info()$user
Sys.getenv("user")
Sys.getenv("LOGNAME")
par$local_user = Sys.getenv("LOGNAME")
par$local_user
par$local_user == "laurasymul"
?rmarkdown::pandoc_available
Sys.getenv("SLURM_NTASKS_PER_NODE")
detectCores()
update.packages()
update.packages()
y
y
load("/Users/laurasymul/Desktop/days_1.Rdata", verbose = TRUE)
