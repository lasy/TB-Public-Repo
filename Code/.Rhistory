cycles = cycles_full[which(cycles_full$user_id_n %in% unique(cycles_full$user_id_n)[1:6000]),]
subset_perc = 100
sample_size = round(subset_perc*nrow(cycles)/100)
sample_number_each_BC = min(sum(cycles$birth_control_CLUE == "pill", na.rm = TRUE), sum(cycles$birth_control_CLUE == "none / condoms", na.rm = TRUE))
sample_size = min(sample_size, 2*sample_number_each_BC)
min_sample_size = min(1000, 2*sample_number_each_BC)
sample_size = max(sample_size, min_sample_size)
sample_size
#sample_size = 100000
j_pill =  which(cycles$birth_control_CLUE == "pill")
j_pill = sample(j_pill, round(sample_size/2))
j_nc =  which(cycles$birth_control_CLUE == "none / condoms")
j_nc = sample(j_nc, round(sample_size/2))
j = c(j_pill, j_nc)
cycles_training_set = cycles[j , ]
cycles_training_set$birth_control_CLUE = factor(as.character(cycles_training_set$birth_control_CLUE), levels = c("pill", "none / condoms"))
tic()
eval(parse(text = paste0("
glm_fit = glm(birth_control_CLUE ~ ",paste(inputs, collapse = " + "),",
data = cycles_training_set,
family = 'binomial' )")))
tac(chunck_name = "data_prep_BC_re_class logistic regression") # takes about 20 seconds on the full dataset on sherlock
summary(glm_fit)
cycles$glm_prob = NA
j = 1:nrow(cycles)
#j = 1:10000
tic()
glm_prob = predict(glm_fit, newdata = cycles[j,inputs], type = "response")
tac(chunck_name = "data_prep_BC_re_class logistic regression prediction") # takes about 20 seconds on the full dataset on sherlock
head(glm_prob)
cycles$glm_prob[j] = 1-glm_prob
cycles$prob = cycles$glm_prob
ggplot(cycles, aes(x =prob, fill = birth_control_CLUE )) +
geom_histogram(binwidth =  0.005, col = NA) +
geom_vline(xintercept = 0.5, linetype = 2)+ xlim(c(0,1))+
scale_fill_manual(values = cols$BC3) +
facet_grid(birth_control_CLUE ~ .)
#comparison
table_cont = table(ifelse(cycles$prob<0.5,"NC","pill"), cycles$birth_control_CLUE)
table_cont
round(t(t(table_cont)/apply(table_cont, 2, sum)), digits = 2)
rm(table_cont)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) +
geom_point() +
facet_grid(birth_control_CLUE ~ ., scale = "free_y")+
scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+
theme(legend.position="top")
grid.arrange(g, nrow = 1)
rm(sub_cycles,g)
hmm = list()
# defining model
hmm$bc_states = c("none / condoms","pill","X-nc", "X-pill","X-did-not-enter") # we split the state X into 3 sub-states to account for the on-boarding BC info of a given user
hmm$symbols = c(paste0("p_",0:10),"X-nc","X-pill","X-did-not-enter")
#initializing model
bc_emission_prob.N = c(dbeta(seq(0,1,by = 0.1), shape1 = 1 , shape2 = 3)+0.2,0,0,0) # more likely to observe LOW score for N/C
bc_emission_prob.P = c(dbeta(seq(0,1,by = 0.1), shape1 = 3 , shape2 = 1)+0.2,0,0,0) # more likely to observe HIGH score for pill
bc_emission_prob.Xnc = c(rep(0,11),1,0,0) # we only observe Xs when we switch users
bc_emission_prob.Xpill = c(rep(0,11),0,1,0) # we only observe Xs when we switch users
bc_emission_prob.Xdne = c(rep(0,11),0,0,1) # we only observe Xs when we switch users
plot(seq(0,1,by = 0.1) , bc_emission_prob.N[1:11], type = "l", col = cols$NC, lwd = 2)
points(seq(0,1,by = 0.1) , bc_emission_prob.P[1:11], type = "l", col = cols$pill, lwd = 2)
# building and normalizing emission prob matrix
hmm$bc_emission_prob = matrix(c(bc_emission_prob.N,bc_emission_prob.P, bc_emission_prob.Xnc, bc_emission_prob.Xpill,bc_emission_prob.Xdne),nrow = length(hmm$bc_states), ncol = length(hmm$symbols), byrow = TRUE)
hmm$bc_emission_prob = hmm$bc_emission_prob/apply(hmm$bc_emission_prob, 1, sum)
rm(bc_emission_prob.N,bc_emission_prob.P,bc_emission_prob.Xnc, bc_emission_prob.Xpill)
hmm$start_prob_declared = 0.6  #probability to start in the declared BC
hmm$p_stay_in_same = 0.90 # probability to stay in the same BC
hmm$p_exit = 0.01 # probability to switch to one of the X- states
hmm$bc_transition_prob = matrix(
c( hmm$p_stay_in_same , 1 - hmm$p_stay_in_same- 3*hmm$p_exit , rep(hmm$p_exit,3),
1 - hmm$p_stay_in_same - 3*hmm$p_exit , hmm$p_stay_in_same, rep(hmm$p_exit,3),
hmm$start_prob_declared, 1-hmm$start_prob_declared,0,0,0,
1-hmm$start_prob_declared, hmm$start_prob_declared,0,0,0,
0.5, 0.5, 0,0,0),
nrow = length(hmm$bc_states), ncol = length(hmm$bc_states), byrow = TRUE)
hmm$start_prob = c(hmm$start_prob_declared,1-hmm$start_prob_declared, 0.5)[as.numeric(cycles$birth_control_CLUE[1])]
hmm$start_prob = c(hmm$start_prob, 1 - hmm$start_prob, 0,0,0)
hmm_mod = initHMM(
States =  hmm$bc_states, Symbols =  hmm$symbols,
startProbs =  hmm$start_prob, transProbs =  hmm$bc_transition_prob,
emissionProbs =  hmm$bc_emission_prob)
obs_p =  paste0("p_",round(10*cycles$prob))
# inserting Xs
x = which(diff(cycles$user_id_n) !=0)
obs_x = c("X-nc","X-pill","X-did-not-enter")[as.numeric(cycles$birth_control_CLUE)]
id = c(seq_along(obs_p)*10, 10*x+5)
o = order(id)
obs = c(obs_p, obs_x)[o]
rm(x, id, o, obs_p, obs_x)
obs
tic()
vit_init = viterbi(hmm = hmm_mod, obs = obs)
tac(chunck_name = "data_prep_BC_re_class viterbi on init model")
vit_init_no_x = vit_init[-grep("X-",vit_init)]
cycles$BC_hmm_init = vit_init_no_x
table_cont_init_bc = table(cycles$BC_hmm_init, cycles$birth_control_CLUE)
round(t(t(table_cont_init_bc)/apply(table_cont_init_bc, 2, sum)), digits = 2)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")
grid.arrange(g_vit_init, g_prob, nrow = 1)
rm(sub_cy, g_prob, g_vit_init)
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)+guides(col = FALSE)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")+guides(col = FALSE)
grid.arrange(g_vit_init, g_prob, nrow = 1)
head(cycles)
cycles = cycles_full
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)+guides(col = FALSE)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")+guides(col = FALSE)
grid.arrange(g_vit_init, g_prob, nrow = 1)
cycles = cycles_full[which(cycles_full$user_id_n %in% unique(cycles_full$user_id_n)[1:6000]),]
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)+guides(col = FALSE)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")+guides(col = FALSE)
grid.arrange(g_vit_init, g_prob, nrow = 1)
cycles_sherlock = cycles
head(cycles_sherlock)
subset_perc = 100
sample_size = round(subset_perc*nrow(cycles)/100)
sample_number_each_BC = min(sum(cycles$birth_control_CLUE == "pill", na.rm = TRUE), sum(cycles$birth_control_CLUE == "none / condoms", na.rm = TRUE))
sample_size = min(sample_size, 2*sample_number_each_BC)
min_sample_size = min(1000, 2*sample_number_each_BC)
sample_size = max(sample_size, min_sample_size)
sample_size
j_pill =  which(cycles$birth_control_CLUE == "pill")
j_pill = sample(j_pill, round(sample_size/2))
j_nc =  which(cycles$birth_control_CLUE == "none / condoms")
j_nc = sample(j_nc, round(sample_size/2))
j = c(j_pill, j_nc)
cycles_training_set = cycles[j , ]
cycles_training_set$birth_control_CLUE = factor(as.character(cycles_training_set$birth_control_CLUE), levels = c("pill", "none / condoms"))
tic()
eval(parse(text = paste0("
glm_fit = glm(birth_control_CLUE ~ ",paste(inputs, collapse = " + "),",
data = cycles_training_set,
family = 'binomial' )")))
tac(chunck_name = "data_prep_BC_re_class logistic regression") # takes about 20 seconds on the full dataset on sherlock
summary(glm_fit)
colnames(cycles)
cycles$glm_prob = NA
j = 1:nrow(cycles)
#j = 1:10000
tic()
glm_prob = predict(glm_fit, newdata = cycles[j,inputs], type = "response")
tac(chunck_name = "data_prep_BC_re_class logistic regression prediction") # takes about 20 seconds on the full dataset on sherlock
head(glm_prob)
cycles$glm_prob[j] = 1-glm_prob
cycles$prob = cycles$glm_prob
ggplot(cycles, aes(x =prob, fill = birth_control_CLUE )) +
geom_histogram(binwidth =  0.005, col = NA) +
geom_vline(xintercept = 0.5, linetype = 2)+ xlim(c(0,1))+
scale_fill_manual(values = cols$BC3) +
facet_grid(birth_control_CLUE ~ .)
#comparison
table_cont = table(ifelse(cycles$prob<0.5,"NC","pill"), cycles$birth_control_CLUE)
table_cont
round(t(t(table_cont)/apply(table_cont, 2, sum)), digits = 2)
rm(table_cont)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) +
geom_point() +
facet_grid(birth_control_CLUE ~ ., scale = "free_y")+
scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+
theme(legend.position="top")
grid.arrange(g, nrow = 1)
rm(sub_cycles,g)
hmm = list()
# defining model
hmm$bc_states = c("none / condoms","pill","X-nc", "X-pill","X-did-not-enter") # we split the state X into 3 sub-states to account for the on-boarding BC info of a given user
hmm$symbols = c(paste0("p_",0:10),"X-nc","X-pill","X-did-not-enter")
#initializing model
bc_emission_prob.N = c(dbeta(seq(0,1,by = 0.1), shape1 = 1 , shape2 = 3)+0.2,0,0,0) # more likely to observe LOW score for N/C
bc_emission_prob.P = c(dbeta(seq(0,1,by = 0.1), shape1 = 3 , shape2 = 1)+0.2,0,0,0) # more likely to observe HIGH score for pill
bc_emission_prob.Xnc = c(rep(0,11),1,0,0) # we only observe Xs when we switch users
bc_emission_prob.Xpill = c(rep(0,11),0,1,0) # we only observe Xs when we switch users
bc_emission_prob.Xdne = c(rep(0,11),0,0,1) # we only observe Xs when we switch users
plot(seq(0,1,by = 0.1) , bc_emission_prob.N[1:11], type = "l", col = cols$NC, lwd = 2)
points(seq(0,1,by = 0.1) , bc_emission_prob.P[1:11], type = "l", col = cols$pill, lwd = 2)
# building and normalizing emission prob matrix
hmm$bc_emission_prob = matrix(c(bc_emission_prob.N,bc_emission_prob.P, bc_emission_prob.Xnc, bc_emission_prob.Xpill,bc_emission_prob.Xdne),nrow = length(hmm$bc_states), ncol = length(hmm$symbols), byrow = TRUE)
hmm$bc_emission_prob = hmm$bc_emission_prob/apply(hmm$bc_emission_prob, 1, sum)
rm(bc_emission_prob.N,bc_emission_prob.P,bc_emission_prob.Xnc, bc_emission_prob.Xpill)
hmm$start_prob_declared = 0.6  #probability to start in the declared BC
hmm$p_stay_in_same = 0.90 # probability to stay in the same BC
hmm$p_exit = 0.01 # probability to switch to one of the X- states
hmm$bc_transition_prob = matrix(
c( hmm$p_stay_in_same , 1 - hmm$p_stay_in_same- 3*hmm$p_exit , rep(hmm$p_exit,3),
1 - hmm$p_stay_in_same - 3*hmm$p_exit , hmm$p_stay_in_same, rep(hmm$p_exit,3),
hmm$start_prob_declared, 1-hmm$start_prob_declared,0,0,0,
1-hmm$start_prob_declared, hmm$start_prob_declared,0,0,0,
0.5, 0.5, 0,0,0),
nrow = length(hmm$bc_states), ncol = length(hmm$bc_states), byrow = TRUE)
hmm$start_prob = c(hmm$start_prob_declared,1-hmm$start_prob_declared, 0.5)[as.numeric(cycles$birth_control_CLUE[1])]
hmm$start_prob = c(hmm$start_prob, 1 - hmm$start_prob, 0,0,0)
hmm_mod = initHMM(
States =  hmm$bc_states, Symbols =  hmm$symbols,
startProbs =  hmm$start_prob, transProbs =  hmm$bc_transition_prob,
emissionProbs =  hmm$bc_emission_prob)
obs_p =  paste0("p_",round(10*cycles$prob))
# inserting Xs
x = which(diff(cycles$user_id_n) !=0)
obs_x = c("X-nc","X-pill","X-did-not-enter")[as.numeric(cycles$birth_control_CLUE)]
id = c(seq_along(obs_p)*10, 10*x+5)
o = order(id)
obs = c(obs_p, obs_x)[o]
rm(x, id, o, obs_p, obs_x)
# running viterbi
tic()
vit_init = viterbi(hmm = hmm_mod, obs = obs)
tac(chunck_name = "data_prep_BC_re_class viterbi on init model")
vit_init_no_x = vit_init[-grep("X-",vit_init)]
cycles$BC_hmm_init = vit_init_no_x
rm(vit_init, vit_init_no_x, hmm_mod, obs)
table_cont_init_bc = table(cycles$BC_hmm_init, cycles$birth_control_CLUE)
round(t(t(table_cont_init_bc)/apply(table_cont_init_bc, 2, sum)), digits = 2)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)+guides(col = FALSE)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")+guides(col = FALSE)
grid.arrange(g_vit_init, g_prob, nrow = 1)
rm(sub_cycles, g_prob, g_vit_init)
m = match(cycles$cycle_id, cycles_sherlock$cycle_id)
head(cycles_sherlock[m,])
head(m)
unique(diff(m))
plot(cycles$prob, cycles_sherlock$prob)
plot(cycles$prob, cycles_sherlock$prob, pch = 16, cex = 0.1)
max(abs(cycles$prob- cycles_sherlock$prob))
table(cycles$BC_hmm_init, cycles_sherlock$BC_hmm_init)
table(cycles$BC_hmm_init, cycles_sherlock$BC_hmm_init)/nrow(cycles)
round(table(cycles$BC_hmm_init, cycles_sherlock$BC_hmm_init)/nrow(cycles)*100, 2)
cont_table = table(cycles$BC_hmm_init, cycles_sherlock$BC_hmm_init)
cont_table = table(cycles$BC_hmm_init, cycles_sherlock$BC_hmm_init)
round(cont_table/apply(cont_table,1,sum)*100, 2)
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob")]
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles[cycles$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
table(cycles$
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles[cycles$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
)
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles[cycles$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles = cycles_full[which(cycles_full$user_id_n %in% unique(cycles_full$user_id_n)[1:6000]),]
cycles_sherlock = cycles
obs_p =  paste0("p_",round(10*cycles$prob))
# inserting Xs
x = which(diff(cycles$user_id_n) !=0)
obs_x = c("X-nc","X-pill","X-did-not-enter")[as.numeric(cycles$birth_control_CLUE)]
id = c(seq_along(obs_p)*10, 10*x+5)
o = order(id)
obs = c(obs_p, obs_x)[o]
rm(x, id, o, obs_p, obs_x)
# running viterbi
tic()
vit_init = viterbi(hmm = hmm_mod, obs = obs)
hmm = list()
# defining model
hmm$bc_states = c("none / condoms","pill","X-nc", "X-pill","X-did-not-enter") # we split the state X into 3 sub-states to account for the on-boarding BC info of a given user
hmm$symbols = c(paste0("p_",0:10),"X-nc","X-pill","X-did-not-enter")
#initializing model
bc_emission_prob.N = c(dbeta(seq(0,1,by = 0.1), shape1 = 1 , shape2 = 3)+0.2,0,0,0) # more likely to observe LOW score for N/C
bc_emission_prob.P = c(dbeta(seq(0,1,by = 0.1), shape1 = 3 , shape2 = 1)+0.2,0,0,0) # more likely to observe HIGH score for pill
bc_emission_prob.Xnc = c(rep(0,11),1,0,0) # we only observe Xs when we switch users
bc_emission_prob.Xpill = c(rep(0,11),0,1,0) # we only observe Xs when we switch users
bc_emission_prob.Xdne = c(rep(0,11),0,0,1) # we only observe Xs when we switch users
plot(seq(0,1,by = 0.1) , bc_emission_prob.N[1:11], type = "l", col = cols$NC, lwd = 2)
points(seq(0,1,by = 0.1) , bc_emission_prob.P[1:11], type = "l", col = cols$pill, lwd = 2)
# building and normalizing emission prob matrix
hmm$bc_emission_prob = matrix(c(bc_emission_prob.N,bc_emission_prob.P, bc_emission_prob.Xnc, bc_emission_prob.Xpill,bc_emission_prob.Xdne),nrow = length(hmm$bc_states), ncol = length(hmm$symbols), byrow = TRUE)
hmm$bc_emission_prob = hmm$bc_emission_prob/apply(hmm$bc_emission_prob, 1, sum)
rm(bc_emission_prob.N,bc_emission_prob.P,bc_emission_prob.Xnc, bc_emission_prob.Xpill)
hmm$start_prob_declared = 0.6  #probability to start in the declared BC
hmm$p_stay_in_same = 0.90 # probability to stay in the same BC
hmm$p_exit = 0.01 # probability to switch to one of the X- states
hmm$bc_transition_prob = matrix(
c( hmm$p_stay_in_same , 1 - hmm$p_stay_in_same- 3*hmm$p_exit , rep(hmm$p_exit,3),
1 - hmm$p_stay_in_same - 3*hmm$p_exit , hmm$p_stay_in_same, rep(hmm$p_exit,3),
hmm$start_prob_declared, 1-hmm$start_prob_declared,0,0,0,
1-hmm$start_prob_declared, hmm$start_prob_declared,0,0,0,
0.5, 0.5, 0,0,0),
nrow = length(hmm$bc_states), ncol = length(hmm$bc_states), byrow = TRUE)
hmm$start_prob = c(hmm$start_prob_declared,1-hmm$start_prob_declared, 0.5)[as.numeric(cycles$birth_control_CLUE[1])]
hmm$start_prob = c(hmm$start_prob, 1 - hmm$start_prob, 0,0,0)
hmm_mod = initHMM(
States =  hmm$bc_states, Symbols =  hmm$symbols,
startProbs =  hmm$start_prob, transProbs =  hmm$bc_transition_prob,
emissionProbs =  hmm$bc_emission_prob)
obs_p =  paste0("p_",round(10*cycles$prob))
# inserting Xs
x = which(diff(cycles$user_id_n) !=0)
obs_x = c("X-nc","X-pill","X-did-not-enter")[as.numeric(cycles$birth_control_CLUE)]
id = c(seq_along(obs_p)*10, 10*x+5)
o = order(id)
obs = c(obs_p, obs_x)[o]
rm(x, id, o, obs_p, obs_x)
# running viterbi
tic()
vit_init = viterbi(hmm = hmm_mod, obs = obs)
tac(chunck_name = "data_prep_BC_re_class viterbi on init model")
vit_init_no_x = vit_init[-grep("X-",vit_init)]
cycles$BC_hmm_init = vit_init_no_x
rm(vit_init, vit_init_no_x, hmm_mod, obs)
cont_table = table(cycles$BC_hmm_init, cycles_sherlock$BC_hmm_init)
round(cont_table/apply(cont_table,1,sum)*100, 2)
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles[cycles$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles[cycles$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
plot(cycles$prob, cycles_sherlock$prob, pch = 16, cex = 0.1)
max(abs(cycles$prob- cycles_sherlock$prob))
cont_table = table(cycles$BC_hmm_init, cycles_sherlock$BC_hmm_init)
round(cont_table/apply(cont_table,1,sum)*100, 2)
cycles_sherlock[cycles_sherlock$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
cycles[cycles$user_id_n == 78, c("user_id","cycle_nb","prob","BC_hmm_init")]
bc_emission_prob.N = c(dbeta(seq(0,1,by = 0.1), shape1 = 1 , shape2 = 3)+0.2) # more likely to observe LOW score for N/C
bc_emission_prob.P = c(dbeta(seq(0,1,by = 0.1), shape1 = 3 , shape2 = 1)+0.2) # more likely to observe HIGH score for pill
plot(seq(0,1,by = 0.1) , bc_emission_prob.N, type = "l", col = cols$NC, lwd = 2)
points(seq(0,1,by = 0.1) , bc_emission_prob.P, type = "l", col = cols$pill, lwd = 2)
hmm$bc_emission_prob = matrix(c(bc_emission_prob.N,bc_emission_prob.P),nrow = length(hmm$bc_states), ncol = length(hmm$symbols), byrow = TRUE)
hmm$bc_emission_prob = hmm$bc_emission_prob/apply(hmm$bc_emission_prob, 1, sum)
hmm = list()
# defining model
hmm$bc_states = c("none / condoms","pill") # hidden states
hmm$symbols = c(paste0("p_",0:10)) # observations
#initializing model
bc_emission_prob.N = c(dbeta(seq(0,1,by = 0.1), shape1 = 1 , shape2 = 3)+0.2) # more likely to observe LOW score for N/C
bc_emission_prob.P = c(dbeta(seq(0,1,by = 0.1), shape1 = 3 , shape2 = 1)+0.2) # more likely to observe HIGH score for pill
plot(seq(0,1,by = 0.1) , bc_emission_prob.N, type = "l", col = cols$NC, lwd = 2)
points(seq(0,1,by = 0.1) , bc_emission_prob.P, type = "l", col = cols$pill, lwd = 2)
# building and normalizing emission prob matrix
hmm$bc_emission_prob = matrix(c(bc_emission_prob.N,bc_emission_prob.P),nrow = length(hmm$bc_states), ncol = length(hmm$symbols), byrow = TRUE)
hmm$bc_emission_prob = hmm$bc_emission_prob/apply(hmm$bc_emission_prob, 1, sum)
rm(bc_emission_prob.N,bc_emission_prob.P,bc_emission_prob.Xnc, bc_emission_prob.Xpill)
hmm$bc_emission_prob
bc_emission_prob.P
c(dbeta(seq(0,1,by = 0.1), shape1 = 3 , shape2 = 1)+0.2) # more likely to observe HIGH score for pill
hmm$start_prob_declared = 0.6  #probability to start in the declared BC
hmm$p_stay_in_same = 0.90 # probability to stay in the same BC
hmm$bc_transition_prob = matrix(
c( hmm$p_stay_in_same , 1 - hmm$p_stay_in_same,
1 - hmm$p_stay_in_same , hmm$p_stay_in_same),
nrow = length(hmm$bc_states), ncol = length(hmm$bc_states), byrow = TRUE)
hmm$bc_transition_prob
hmm$start_prob = c(1/2,1/2)
hmm_mod = initHMM(
States =  hmm$bc_states, Symbols =  hmm$symbols,
startProbs =  hmm$start_prob, transProbs =  hmm$bc_transition_prob,
emissionProbs =  hmm$bc_emission_prob)
hmm_mod
obs =  paste0("p_",round(10*cycles$prob))
head(obs)
head(obs, 1000)
length(obs)
length(cycles$user_id)
tic()
vit_init = ave(obs, cycles$user_id, FUN = my_viterbi)
my_viterbi = function(obs = obs){viterbi(hmm = hmm_mod, obs = obs)}
# running viterbi
tic()
vit_init = ave(obs, cycles$user_id, FUN = my_viterbi)
tac(chunck_name = "data_prep_BC_re_class viterbi on init model")
head(vit_init)
table_cont_init_bc = table(cycles$BC_hmm_init, cycles$birth_control_CLUE)
round(t(t(table_cont_init_bc)/apply(table_cont_init_bc, 2, sum)), digits = 2)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)+guides(col = FALSE)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")+guides(col = FALSE)
grid.arrange(g_vit_init, g_prob, nrow = 1)
rm(sub_cycles, g_prob, g_vit_init)
which(cycles$user_id_n == 48)
cycles$user_id[824]
load("../../TB-Restricted-Access-Repo/stuff_from_sherlock/cycles_BC_re_classification_final.Rdata", verbose = TRUE)
table(cycles$BC)
table(cycles$BC)/nrow(cycles)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC) + guides(col = FALSE)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")+ guides(col = FALSE)
g_conf = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = conf)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+
scale_color_gradientn(colours = c("red","gray90","black"),
values = rescale(c(0,confidence_thres,1)),
limits=c(0,1))+
#scale_color_gradient2(low = "red", high = "black",mid = "gray90", midpoint = confidence_thres, limits = c(0,2*confidence_thres))+
theme(legend.position="top")+ guides(col = FALSE)
confidence_thres = 0.1
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC) + guides(col = FALSE)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")+ guides(col = FALSE)
g_conf = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = conf)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+
scale_color_gradientn(colours = c("red","gray90","black"),
values = rescale(c(0,confidence_thres,1)),
limits=c(0,1))+
#scale_color_gradient2(low = "red", high = "black",mid = "gray90", midpoint = confidence_thres, limits = c(0,2*confidence_thres))+
theme(legend.position="top")+ guides(col = FALSE)
grid.arrange(g_vit_init, g_prob, g_conf, nrow = 1)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")
grid.arrange(g_vit_init, g_prob, nrow = 1)
rm(sub_cycles, g_prob, g_vit_init)
sub_cycles = cycles[cycles$user_id %in% unique(cycles$user_id)[1:80],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
sub_cycles$BC = factor(sub_cycles$BC, levels = c(as.character(par$BC_dict$name),"unclear"))
g_BC = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC3)
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")
g_conf = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = conf)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+
scale_color_gradientn(colours = c("red","gray90","black"),
values = rescale(c(0,confidence_thres,1)),
limits=c(0,1))+
#scale_color_gradient2(low = "red", high = "black",mid = "gray90", midpoint = confidence_thres, limits = c(0,2*confidence_thres))+
theme(legend.position="top")
grid.arrange(g_BC, g_vit_init, g_prob, g_conf, nrow = 1)
rm(sub_cycles, g_BC, g_prob, g_vit_init, g_conf)
agg = aggregate(BC ~ stretch_id + user_id, cycles[cycles$BC != "unclear",], lu)
sum(agg$BC > 1)
if(sum(agg$BC > 1)>0){
sub_cycles = cycles[cycles$user_id %in% agg$user_id[which(agg$BC>1)[1:80]],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
sub_cycles$BC = factor(sub_cycles$BC, levels = c(as.character(par$BC_dict$name),"unclear"))
g_BC = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC3)
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")
g_conf = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = conf)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+
scale_color_gradientn(colours = c("red","gray90","black"),
values = rescale(c(0,confidence_thres,1)),
limits=c(0,1))+
#scale_color_gradient2(low = "red", high = "black",mid = "gray90", midpoint = confidence_thres, limits = c(0,2*confidence_thres))+
theme(legend.position="top")
grid.arrange(g_BC, g_vit_init, g_prob, g_conf, nrow = 1)
rm(sub_cycles, g_BC, g_prob, g_vit_init, g_conf)
}
sub_cycles = cycles[cycles$user_id %in% agg$user_id[which(agg$BC==1)[1:80]],]
sub_cycles$user_id_n = factor(sub_cycles$user_id_n, levels = unique(sub_cycles$user_id_n[order(sub_cycles$birth_control_CLUE)]))
sub_cycles$BC = factor(sub_cycles$BC, levels = c(as.character(par$BC_dict$name),"unclear"))
g_BC = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC3)
g_vit_init = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = BC_hmm_init)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y") + theme(legend.position="top")+ scale_color_manual(values = cols$BC)
g_prob = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = prob)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+ scale_color_gradient2(low = cols$NC, high = cols$pill, mid = "gray90", midpoint = 0.5)+ theme(legend.position="top")
g_conf = ggplot(sub_cycles, aes(x = cycle_nb, y = user_id_n, col = conf)) + geom_point() + facet_grid(birth_control_CLUE ~ ., scale = "free_y")+
scale_color_gradientn(colours = c("red","gray90","black"),
values = rescale(c(0,confidence_thres,1)),
limits=c(0,1))+
#scale_color_gradient2(low = "red", high = "black",mid = "gray90", midpoint = confidence_thres, limits = c(0,2*confidence_thres))+
theme(legend.position="top")
grid.arrange(g_BC, g_vit_init, g_prob, g_conf, nrow = 1)
rm(sub_cycles, g_BC, g_prob, g_vit_init, g_conf)
rm(agg)
table_BC = table(cycles$birth_control_CLUE, cycles$BC)
table_BC
round(table_BC/apply(table_BC,1,sum)*100,2)
load(paste0(IO$output_data, "users.Rdata"), verbose = TRUE)
user_BC_agg = ddply(cycles_BC[which(cycles_BC$BC %in% par$BC_dict$name),],
c("user_id"),
summarise,
BC_rle = paste0(rle(BC)$values, collapse = " - "))
View(users)
table_BC = table(users$BC)
table_BC
round(table_BC/sum(table_BC)*100,2)
table_BC = table(users$BC, users$birth_control)
?first
?case
?when
1:10 %>%
when(
sum(.) <=  50 ~ sum(.),
sum(.) <= 100 ~ sum(.)/2,
~ 0
)
when(1>2 ~ 1, 1<2 ~ 2)
x <- 1:50
case_when(
x %% 35 == 0 ~ "fizz buzz",
x %% 5 == 0 ~ "fizz",
x %% 7 == 0 ~ "buzz",
TRUE ~ as.character(x)
)
table_BC_trans = table(users$BC_trans)
table_BC_trans
round(table_BC_trans/sum(table_BC_trans)*100,2)
?cut
par$BC_dict$name
colnames(users)
par$BC_dict$name
folder_name
IO$input_data = paste0(IO$r_Data,folder_name,"input_data/")
IO$tmp_data = paste0(IO$r_Data,folder_name, "tmp_data/")
IO$output_data = paste0(IO$r_Data,folder_name,"output_data/")
IO$input_data
IO$tmp_data = paste0(IO$r_Data,folder_name, "tmp_data/")
IO$tmp_data
IO$output_data = paste0(IO$r_Data,folder_name,"output_data/")
IO$output_data
!dir.exists(IO$tmp_data)
!dir.exists(IO$output_data)
sum(cycles$BC %in% par$BC_dict$name)
dim(cycles)
dim(cycles_m)
sum(cycles$BC %in% par$BC_dict$name, na.rm = TRUE)
sum(cycles$BC %in% par$BC_dict$name, na.rm = TRUE) - nrow(users)
