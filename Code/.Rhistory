sample_from_poisson[1:3]
mean(sample_from_poisson)
set.seed(19720505)
sample_from_poisson = rpois(10, 5)
sample_from_poisson[1:3]
mean(sample_from_poisson)
set.seed(19720505)
sample_from_poisson = rpois(10, 5)
sample_from_poisson[1:3]
mean(sample_from_poisson)
set.seed(19720505)
sample_from_poisson = rpois(10, 5)
sample_from_poisson[1:3]
mean(sample_from_poisson)
set.seed(19720505)
sample_from_poisson = rpois(10, 5)
sample_from_poisson[1:3]
mean(sample_from_poisson)
set.seed(19720505)
sample_from_poisson = rpois(10, 5)
sample_from_poisson[1:3]
mean(sample_from_poisson)
set.seed(19720505)
sample_from_poisson = rpois(10, 5)
sample_from_poisson[1:3]
mean(sample_from_poisson)
set.seed(1)
sample_from_poisson = rpois(10000, 5)
mean(sample_from_poisson==5)
dpois(5,5)
mean(sample_from_poisson <= 5)
ppois(5,5)
num_replicates = 50000
nexps = 5
rate = 0.1
set.seed(0xdada)
x1 = replicate(num_replicates, {
sum(rexp(n = nexps, rate = rate))
}) # end of replicate
head(x1)
num_replicates = 50000
nexps = 5
rate = 0.1
set.seed(0xdada)
x1 = replicate(num_replicates, {
sum(rexp(n = nexps, rate = rate))
}) # end of replicate
head(x1)
hist(x1, freq = FALSE, ylim = c(0, 0.02))
lines(sort(x1), dgamma(sort(x1), shape = nexps, scale = 1/rate),
col = "blue", lwd = 2)
sapply( 3:7, function(i) { i^2-1 })
set.seed(0xdada)
x1 = sapply(seq_len(num_replicates), function(i) {
sum(rexp(n = nexps, rate = rate))
}
) # end of sapply
head(x1)
set.seed(0xdada)
x1 = vapply(seq_len(num_replicates), function(i) {
sum(rexp(n = nexps, rate = rate))
}, # end of anonymous function
FUN.VALUE = numeric(1)
) # end of vapply
head(x1)
set.seed(0)
system.time({
m = matrix(rexp(n = nexps * num_replicates, rate = rate),
nrow = nexps,
ncol = num_replicates)
x1 = apply(m, 2, sum)
})
head(x1)
x2 = colSums(m)
identical(x1, x2)
knitr::opts_chunk$set(echo = TRUE)
num_trials <- 10000
binom_variable <- rbinom(n = num_trials, prob = 0.4, size = 20)
freqs <- table(binom_variable)
freqs
names(freqs)[which.max(freqs)]
x <- 1:20
# Probability Mass Function (discrete version of a pdf)
pmf <- dbinom(x, prob = 0.4, size = 20)
# Plot the distribution of Binomial Variable with specified parameters
# Then, look for the x-value which hives the highest probability density
plot(x = x, y = pmf)
dbinom(x = 8, prob = 0.4, size = 20)
num_trials <- 10000
binom_variable <- rgeom(n = num_trials, prob = 0.2)
freqs <- table(binom_variable)
freqs
names(freqs)[which.max(freqs)]
x <- 0:10
pdf <- dgeom(x, prob = 0.2)
# Plot the distribution of Binomial Variable with specified parameters
plot(x = x, y = pdf)
qgeom(p = 0.95, prob = 0.2)
knitr::opts_chunk$set(echo = TRUE)
x = 0:20
p = pgeom(x, prob = 0.8)
plot(x,p)
abline(h = 0.95)
smallest_n = min(x[p>=0.95])
abline(v = smallest_n)
text(smallest_n, 0.95, labels = smallest_n, pos = 4)
x = 0:20
p = pgeom(x, prob = 0.2)
plot(x,p)
abline(h = 0.95)
smallest_n = min(x[p>0.95])
abline(v = smallest_n)
text(smallest_n, 0.95, labels = smallest_n, pos = 4)
x = 0:20
p = pgeom(x, prob = 0.2)
plot(x,p)
abline(h = 0.95, lty = 2)
smallest_n = min(x[p>0.95])
abline(v = smallest_n, lty = 2)
text(smallest_n, 0.95, labels = smallest_n, pos = 4)
text(smallest_n, 0.95, labels = smallest_n, pos = 1)
x = 0:20
p = pgeom(x, prob = 0.2)
plot(x,p)
abline(h = 0.95, lty = 2)
smallest_n = min(x[p>0.95])
abline(v = smallest_n, lty = 2)
text(smallest_n, 0.95, labels = smallest_n, pos = 1)
x = 0:20
d = dgeom(x, prob = 0.8)
plot(x,d)
j.max = which.max(d)
dxmax =  x[j.max]
abline(v = dxmax)
text(x = dxmax, y = d[j.max], labels = paste("(",dxmax,",",d[j.max],")"), pos = 4)
x = 0:20
p = pgeom(x, prob = 0.8)
plot(x,p)
abline(h = 0.95)
smallest_n = min(x[p>=0.95])
abline(v = smallest_n)
text(smallest_n, 0.95, labels = smallest_n, pos = 4)
num_trials <- 50000
var(rpois(n = num_trials, lambda = 5))
num_trials <- 50000
var(replicate(num_trials, sum(rpois(n = 50, lambda = 0.1))))
library("BSgenome.Celegans.UCSC.ce2")
library("Biostrings")
Celegans
length(Celegans)
sum(seqlengths(Celegans))
seqlengths(Celegans)
lfM = letterFrequency(Celegans$chrM, letters=c("A", "C", "G", "T"))
lfM
n = length(Celegans$chrM)
expected = rep(n/4 ,4)
oe = oestat( o = lfM, e=expected)
oestat = function(o, e){
sum( (e-o)^2/e )
}
n = length(Celegans$chrM)
expected = rep(n/4 ,4)
oe = oestat( o = lfM, e=expected)
oe
set.seed(1)
B = 10000
oenull = replicate(B, oestat(e=expected, o=rmultinom(1,size = n, prob = rep(1/4,4))))
hist(oenull, breaks = 50)
quantile(oenull, p = 0.95)
oe
oe > quantile(oenull, p = 0.95)
compute_power = function(n, sigma, numTrials){
sampa = matrix(rnorm(n*numTrials, 1, sigma), ncol=numTrials)
sampb= matrix(rnorm(n*numTrials, 2, sigma), ncol=numTrials)
statistics = (apply(sampa, 2, mean) - apply(sampb, 2, mean))/sqrt(2*sigma^2/n)
return (mean(abs(statistics) >= qnorm(0.975)))
}
set.seed(0)
compute_power(3, 0.5, 10000)
compute_power(4, 0.5, 10000) # So it looks like 4 samples will do it.
set.seed(0)
compute_power(3, 0.5, 10000)
compute_power(4, 0.5, 10000) # So it looks like 4 samples will do it.
library(ggplot2)
library(dplyr)
library(Hiiragi2013)
install.packages("Hiiragi2013")
library(Hiiragi2013)
df = as.data.frame(table(dgamma(10000, size = 20, prob = 0.4)))
?dgamma
df = as.data.frame(table(dbinom(10000, size = 20, prob = 0.4)))
df
df = as.data.frame(table(rbinom(10000, size = 20, prob = 0.4)))
df
iris
g = ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+
geom_violin()
g
g = ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+
geom_violin(col = NA)
g
g = ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+
geom_violin(col = NA)
g
g + theme_minimal()
g + theme_dark()
g + theme_bw()
g + theme_economist()
g + theme_economist
library(ggthemes)
g + theme_economist
g + theme_economist()
g + theme_economist_white()
g = ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+
geom_violin(col = NA)
g
g + theme_minimal()
g + theme_dark()
library(ggthemes)
g + theme_economist_white()
g = ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species))+
geom_violin(col = NA)
g
g + theme_minimal()
g + theme_dark()
library(ggthemes)
g + theme_economist_white()
install.packages("ggvis")
install.packages("demo")
install.packages("ggvis")
install.packages("demo")
run = function(x) source(file.path(
system.file("demo", package = "ggvis"),
x))
demo("brush", "ggvis")
library("ggvis")
library("shiny")
library("tibble")
d = tibble(
v = seq(0, 40i, length.out = 400),
z = abs(v) * exp(v))
dr = reactive({
invalidateLater(200, NULL)
d  <<- d * (0.975 + sqrt(1-0.975^2)*1i)
d
})
ggvis(dr, x = ~Re(z), y = ~Im(z)) %>%
layer_points(fill = ~factor(rank(abs(z)) %% 200)) %>%
layer_paths() %>%
scale_numeric("x", domain = c(-40, 40)) %>%
scale_numeric("y", domain = c(-40, 40)) %>%
scale_ordinal("fill", range = rainbow(200)) %>%
hide_legend("fill")
library(ggplot2)
library(dplyr)
g = ggplot(iris,
aes(x = Species,
y = Sepal.Length,
fill = Species))+
geom_violin(col = NA)
g
g + theme_minimal()
g + theme_dark()
library(ggthemes)
g + theme_economist_white()
library(Hiiragi2013)
install.packages("Hiiragi2013")
install.packages("~/Downloads/Hiiragi2013_1.20.0.tar.gz", repos = NULL, type = "source")
BiocManager::install("Hiiragi2013")
library(Hiiragi2013)
data(x)
expression <- Biobase::exprs(x)
dftx <- data.frame(pData(x), t(expression))
head(pData(x))
dim(expression)
groupSize <- table(dftx$sampleGroup)
groupSize
ggplot( dftx, aes( x = X1426642_at, y = X1418765_at ))  +
geom_point( aes( color = sampleGroup), shape = 19 ) +
geom_smooth( method = "loess" ) +
scale_color_discrete( guide = FALSE )
library(ggplot2)
library(dplyr)
library(Hiiragi2013)
library(BiocStyle)
library(Hiiragi2013)
library(Biobase)
data(x)
expression <- Biobase::exprs(x)
dftx <- data.frame(pData(x), t(expression))
head(pData(x))
BiocManager::install("BiocStyle")
install.packages("plotly")
install.packages("season")
pkgs_needed <- c("tidyverse", "Biostrings",
"parathyroidSE", "EnsDb.Hsapiens.v86", "nutshell")
letsinstall = setdiff(pkgs_needed, installed.packages())
if (length(letsinstall) > 0) {
BiocManager::install(letsinstall)
}
library("dplyr")
library("ggplot2")
library("Biostrings")
data("births2006.smpl", package = "nutshell")
births <- mutate(births2006.smpl,
WEEKEND = ifelse(DOB_WK %in% c(1, 7), "Weekend", "Weekday"),
HEALTH  = c("CritLow", "Low", "Normal")[ 1 +
findInterval(APGAR5, c(3.5, 6.5)) ],
ESTGEST = replace(ESTGEST, ESTGEST==99, NA))
births.small <- births[ sample(nrow(births), 40000), ]
head(births.small)
help("births2006.smpl", package = "nutshell")
ppp <- ggplot(births.small)
ppp
ppp <- ggplot(births.small)
ppp + geom_bar(aes(x = factor(DOB_WK)))
ppp <- ggplot(births.small)
ppp + geom_bar(aes(x = factor(DOB_WK)))
ppp <- ggplot(births.small)
ppp + geom_bar(aes(x = factor(DOB_WK), fill = DMETH_REC))
ppp <- ggplot(births.small)
ppp + geom_bar(aes(x = factor(DOB_WK), fill = DMETH_REC), position = "stack")
ppp <- ggplot(births.small)
ppp + geom_bar(aes(x = factor(DOB_WK), fill = DMETH_REC), position = "dodge"
)
ppp <- ggplot(births.small)
ppp + geom_bar(aes(x = factor(DOB_WK), fill = DMETH_REC), position = "dodge")
ppp <- ggplot(births.small)
ppp + geom_bar(aes(x = factor(DOB_WK), fill = DMETH_REC), position = "dodge")
ppp <- ggplot(births.small)
ppp + geom_histogram(aes(x = MAGER), binwidth = 1)
ppph <- ggplot(births.small) +
geom_histogram(aes(x = MAGER, fill = DMETH_REC), binwidth = 1)
ppph + facet_wrap( ~ DOB_WK)
ppph + facet_grid(DOB_WK ~ SEX)
ggplot(dplyr::filter(births, !(DMETH_REC %in% "Unknown"))) +
geom_histogram(aes(x = MAGER, fill = factor(TBO_REC)), binwidth = 1) +
facet_grid(WEEKEND ~ DMETH_REC, scale="free_y", drop = TRUE) +
geom_vline(xintercept = seq(15, 45, by=5), alpha=0.2, color="white") +
labs(title = "Births in USA 2006", fill="Birth\nOrder")
ggplot(births.small, aes(x = MAGER)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "grey", col = "black") +
stat_density(col = "red", fill = NA)
ggplot(births.small, aes(x = MAGER)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill="grey", col="black") +
stat_density(col="red", fill=NA) +
stat_function(fun = dlnorm, col = "blue",
args = list(mean = mean(log(births.small$MAGER)),
sd =    sd(log(births.small$MAGER))))
ppp2 <- ggplot(dplyr::filter(births.small, !is.na(WTGAIN) & !is.na(DBWT)),
aes(x = WTGAIN, y = DBWT)) +
labs(x = "Weight Gain by Mother", y = "Birth Weight in Grams")
ppp2 + geom_point()
ppp2 + stat_bin2d()
ppp2 + stat_summary_2d(aes(z = ESTGEST), fun = median) +
labs(title = "median number of weeks of gestation")
# here we force a linear model fit
ppp2 + geom_point() + stat_smooth(method = lm)
ppp2 + geom_point() + stat_smooth(aes(col = SEX))
ppp2 + geom_hex(bins = 30) + stat_smooth(aes(col = SEX))
# we repeat again the code above so you don't gave to scroll to look at it.
ppp2 <- ggplot(dplyr::filter(births.small, !is.na(WTGAIN) & !is.na(DBWT)),
aes(x = WTGAIN, y = DBWT)) +
labs(x = "Weight Gain by Mother", y = "Birth Weight in Grams")
ppp2 + stat_bin2d() + scale_fill_gradient(trans = "sqrt")
ppp2 + stat_summary_2d(aes(z = ESTGEST), fun = mean) +
scale_y_log10(limits = 10^c(2, 4)) +
scale_fill_gradient2(midpoint = 24) +
labs(title="mean number of weeks of gestation")
ppp3 <- ggplot(dplyr::filter(births, DPLURAL == "4 Quadruplet"),
aes(x = UPREVIS, y = MAGER)) +
geom_point(aes(size = ESTGEST, shape = DMETH_REC, col = DMEDUC)) +
stat_smooth(aes(col = DMETH_REC), method = "lm")
ppp3
ppp3 + scale_size(range=c(3, 6)) + scale_color_brewer(palette = "Set1") +
scale_shape(solid = FALSE)
oestat = function(o, e){
sum( (e-o)^2/e )
}
set.seed(1)
B = 10000
# here are pick an arbitrary length / not the same as for Celegans
n = 2847
expected = rep(n/4 ,4)
oenull = replicate(
B, oestat(e=expected, o=rmultinom(1,size = n, prob = rep(1/4,4))))
ggplot(data.frame(null_stats = oenull)) +
geom_histogram(aes(x = null_stats), bins = 100)
# Instead we draw the theoretical line ourselves
ggplot(data.frame(stat = oenull), aes(sample = stat)) +
stat_qq(distribution = stats::qchisq, dparams = list(df = 3)) +
geom_abline(slope = 1, color = "red")
library("parathyroidSE")
library("EnsDb.Hsapiens.v86")
data("parathyroidGenesSE", package = "parathyroidSE")
metadata(parathyroidGenesSE)$MIAME
abstract(metadata(parathyroidGenesSE)$MIAME)
genes <- read.csv(textConnection(
"name, group
ESR1,  estrogen
ESR2,  estrogen
CASR,  parathyroid
VDR,   parathyroid
JUN,   parathyroid
CALR,  parathyroid
ORAI2, parathyroid"),
stringsAsFactors = FALSE, strip.white = TRUE)
ens <- ensembldb::select(EnsDb.Hsapiens.v86,
keys = list(GenenameFilter(genes$name),
TxBiotypeFilter("protein_coding")),
columns = c("GENEID", "GENENAME"))
ens <-
dplyr::filter(ens, GENEID %in% rownames(parathyroidGenesSE)) %>%
mutate(group = genes$group[match(GENENAME, genes$name)])
ens
countData <- assay( parathyroidGenesSE )
gene.counts <- t(countData[ens$GENEID, ])
colnames(gene.counts) <- ens$GENENAME
dat <- cbind(data.frame(colData( parathyroidGenesSE)), data.frame(gene.counts))
head(dat)
ggplot(dat, aes(col = patient, x = treatment, y = ESR1)) +
geom_point(size = 3) +
facet_grid( . ~ time)
pkgs_needed <- c("BSgenome.Hsapiens.UCSC.hg19", "Gviz")
letsinstall = setdiff(pkgs_needed, installed.packages())
if (length(letsinstall) > 0) {
BiocManager::install(letsinstall)
}
library(BSgenome.Hsapiens.UCSC.hg19)
chr8  =  Hsapiens$chr8
cpg_url <- url("http://web.stanford.edu/class/bios221/data/model-based-cpg-islands-hg19.txt")
CpGtab <- read.table(cpg_url, header=T)
nrow(CpGtab)
irCpG = with(dplyr::filter(CpGtab, chr == "chr8"),
IRanges(start = start, end = end))
grCpG = GRanges(ranges = irCpG, seqnames = "chr8", strand = "+")
genome(grCpG) = "hg19"
library("Gviz") # you might need to install this from Bioconductor
ideo = IdeogramTrack(genome = "hg19", chromosome = "chr8")
plotTracks(
list(GenomeAxisTrack(),
AnnotationTrack(grCpG, name = "CpG"), ideo),
from = 2200000, to = 5800000,
shape = "box", fill = "#006400", stacking = "dense")
CGIview    = Views(unmasked(Hsapiens$chr8), irCpG)
NonCGIview = Views(unmasked(Hsapiens$chr8), gaps(irCpG))
seqCGI      = as(CGIview, "DNAStringSet")
seqNonCGI   = as(NonCGIview, "DNAStringSet")
dinucCpG    = sapply(seqCGI, dinucleotideFrequency)
dinucNonCpG = sapply(seqNonCGI, dinucleotideFrequency)
dinucNonCpG[, 1]
NonICounts = rowSums(dinucNonCpG)
IslCounts  = rowSums(dinucCpG)
NonICounts
IslCounts
TI  = matrix( IslCounts, ncol = 4, byrow = TRUE)
TnI = matrix(NonICounts, ncol = 4, byrow = TRUE)
dimnames(TI) = dimnames(TnI) =
list(c("A", "C", "G", "T"), c("A", "C", "G", "T"))
TI
MI = TI /rowSums(TI)
MI
MN = TnI / rowSums(TnI)
MN
freqIsl=alphabetFrequency(seqCGI,baseOnly=TRUE,collapse=TRUE)[1:4]
freqIsl / sum(freqIsl)
freqNon=alphabetFrequency(seqNonCGI,baseOnly=TRUE,collapse=TRUE)[1:4]
freqNon / sum(freqNon)
alpha = log((freqIsl/sum(freqIsl)) / (freqNon/sum(freqNon)))
beta  = log(MI / MN)
scorefun = function(x) {
s = unlist(strsplit(x, ""))
score = alpha[s[1]]
if (length(s) >= 2)
for (j in 2:length(s))
score = score + beta[s[j-1], s[j]]
score
}
x = "ACGTTATACTACG"
scorefun(x)
generateRandomScores = function(s, len = 100, B = 1000) {
alphFreq = alphabetFrequency(s)
isGoodSeq = rowSums(alphFreq[, 5:ncol(alphFreq)]) == 0
s = s[isGoodSeq]
slen = sapply(s, length)
prob = pmax(slen - len, 0)
prob = prob / sum(prob)
idx  = sample(length(s), B, replace = TRUE, prob = prob)
ssmp = s[idx]
start = sapply(ssmp, function(x) sample(length(x) - len, 1))
scores = sapply(seq_len(B), function(i)
scorefun(as.character(ssmp[[i]][start[i]+(1:len)]))
)
scores / len
}
scoresCGI    = generateRandomScores(seqCGI)
scoresNonCGI = generateRandomScores(seqNonCGI)
df <- rbind(
data.frame(region = "cgi", score = scoresCGI),
data.frame(region = "ncgi", score = scoresNonCGI)
)
ggplot(df, aes(x = score, fill = region)) +
geom_histogram(alpha = 0.5, color = "black", position = "identity")
?file.rename
!("cycle_ids" %in% ls())
now()
now()
now
today()
library(lubridate)
now()
source("Scripts/00_setup.R")
